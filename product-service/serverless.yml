service: product-service

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1

plugins:
  - serverless-webpack
  - serverless-aws-documentation

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
  documentation:
    # this is general info about the API
    api:
      info:
        version: '2'
        title: Product-service
        description: Some example API
        termsOfService: https://www.google.com
        contact:
          name: Alexey Tomashevich
          url: https://join.skype.com/invite/dS2VsXIdTG4z
          email: lex.bogos@gmail.com
        license:
          name: The license
          url: https://www.github.com/lexBogos
      tags:
        -
          name: Tag
          description: First service tag
    models:    
      -
        name: getProductByIdResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            count:
              type: number
              description: The quantity of this product in the store
            description:
              type: string
              description: Product discription
            id:
              type: string
              description: Product id
            price:
              type: string
              description: Conditional price
            title:
              type: string
              description: Product title
      -
        name: getAllProductsResponse
        contentType: "application/json"
        schema:
          type: array
          description: An array of all products that are located in the store DB
          items:
            type: object
            properties:
              count:
                type: number
                description: The quantity of this product in the store
              description:
                type: string
                description: Product discription
              id:
                type: string
                description: Product id
              price:
                type: string
                description: Conditional price
              title:
                type: string
                description: Product title 

functions:
  getAllProducts:
    handler: handler.getAllProducts
    events:
      - http:
          path: products
          method: get
          documentation:
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": getAllProductsResponse
  
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: products/{productId}
          method: get
          request: 
            parameters: 
              paths: 
                productId: true
          documentation:
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": getProductByIdResponse
  
  postProduct:
    handler: handler.postProduct
    events:
      - http:
          path: create-products
          method: get
  
  postProductQuantity:
    handler: handler.postProductQuantity
    events:
      - http:
          path: modify-porduct-quantity
          method: get              